TODO

Problem: how to compile & run a paper script

Problem: define test case for each atomic, in ZS

Problem: "f:() f()" causes assertion failure in src/zs_vm.c:386


Problem: "K: (1000 *) K (1 2 3)" does not compile

Problem: zs shell does not allow editing
Solution: use GNU readline when available


Problem: $shell$ does not allow definitions
This means we can't define a function and use it on the same line
Solution: remove need to define a $shell$ function



---------------------------

- rewrite shell as repl primitive
    - read line of input, put onto pipe
    - execute input, display results if any
    - core of zs.c

- then shell is
    until (break) { repl }


- repl primitive takes list of lines, executes

- rewrite scaling primitives in ZS?
<
    k: (<Multiply by 1000> 1000 *)
    M: (<Multiply by 1M> 1000000 *)
> repl
    - default for * is "multiple by 1"?
    - how to add hint for function....
    k: <Multiply by 1000> (1000 *)

- pipes can probably be built as single tree structure?

- selftests for atomics

- make zs_repl into an actor
    - accept input on pipe
    - return output to pipe (end of sentence)

- user functions take type of first function

- profile every function, simple counter, 'n top' atomic sorts & prints top n

- expressive constants: 1/2 1:2 2^16-1 1024*1024
    contain + - /: *x ^
    simple stack-based evaluator in zs_lex

help on function
    how to put function reference onto pipe
    (function)
    now (function) now -
    now (function (args)) now -



help (xyz)
    get hint on xyz if it's an atomic
    else show code for xyz if it's a function

    -> how do we know to pass a function rather than execute it?
    1. @ before function name
    2. atomic can force this

mark atomics as draft, stable, legacy
contract for every function/atomic

0, 1 many - conditionals and loops are the same; we repeat a phrase N times

    compute { execute }
    5 { <*> <*> <*>}

    forever { sleep (1) temperature }
    until (12 PM) { sleep (1) temperature }

    Event driven:
        above (30 C) { cooling (on) }
        below (15 C) { heating (on) }



Multiline strings
    <
    some value
    >

    <
some value
>

Multi-line indented strings
    <
    some value
    and another value
    and then more
    >


string atomics
    1, many
        upper
        lower
        camel
        title
        slug
        size

    many
        paste
        sort
        first
        last

    2
        find        (find string in another)
        split       (split string into tokens)
        count       (count string in another)
        repeat      (repeat string N times)
        match       (string vs. pattern or pattern vs. string)
        replace     (string mashing,...)
