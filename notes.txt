TODO

pass input, output pipes to atomics

help on function
    how to put function onto pipe
    ? xyz

help (xyz)
    get hint on xyz if it's an atomic
    else show code for xyz if it's a function


problem with () notation is you have to think in advance

    add (max (1 2 3) min (4 5 6))
        - unlimited levels of nesting
    or
    1 2 3, max. 4 5 6, min. add.
        - two levels of nesting only

    nest
    1 2 3, max      take set of 1 2 3 and apply max
    .               send result up and clear
    4 5 6, min      take set of 4 5 6 and apply min
    .               send result up and clear
    add             since there's nothing here, look up
                    take set of 3, 4 and apply add

    period operator takes current outputs and sends to parent output
        - what is parent output?

    atomic function
        - if input set is empty and parent is not empty
        - unnest and execute function on parent


    nest: push output, new output, new input
    unnest: input <= output

        else
        if (opcode == VM_UNNEST) {
            if (self->verbose)
                printf ("D [%04zd]: unnest stack=%zd\n", needle, self->pipe_stack_ptr);
            assert (self->pipe_stack_ptr > 0);
            self->pipe_stack_ptr--;
            zs_pipe_destroy (&self->input);
            self->input = self->output;
            self->output = self->pipe_stack [self->pipe_stack_ptr];
        }



computations

    choices                                             parsing     surprise    set
        infix notation      a - b + c                     *          *****       *
            with parens     a - (b + c)                   *          ****        *
            or without      automatic priority
        postfix notation    a b - c +                     **          **         *
            order?          a - b or b - a?
        function notation   + (- (a b) c)                 ****         *       *****
        comma notation      a b, - c, +                   ****         *       *****

    answer: make operators as functions/atomics
        + * / - % ^

    answer: allow a b, - c, +

if atomic is called on line by itself
    then show hint
        perhaps registration tweak to allow function to run on empty data
if atomic is called with empty list
    then run atomic?

provide atomics with input & output pipe automatically:
    zs_pipe_t *input, zs_pipe_t *output

    if called inline
        input is null
        if output has values
            can behave as unary function
            pull & send last value
        if output is empty
            then do what?

    if called on list
        input provides list


pipe as stack?
    1 2 3, k 2, m
    sum (k (1 2 3) M (2))




0, 1 many - conditionals and loops are the same; we repeat a function N times

    compute { execute }
    sum { echo <*> }

    forever { sleep (1) temperature }
    until (12 PM) { sleep (1) temperature }

    Event driven:
        above (30 C) { cooling (on) }
        below (15 C) { heating (on) }


Comments

    #   starts a comment until the end of the line
        no multiline comments

Numbers and units

    expressive number support


Multiline strings
    <
    some value
    >

    <
some value
>

Multi-line indented strings
    <
    some value
    and another value
    and then more
    >

string atomics
    1, many
        upper
        lower
        camel
        title
        slug
        size

    many
        paste
        sort
        first
        last

    2
        find        (find string in another)
        split       (split string into tokens)
        count       (count string in another)
        repeat      (repeat string N times)
        match       (string vs. pattern or pattern vs. string)
        replace     (string mashing,...)


******** DONE

Exponentiation functions
    Atomics that operate on last value in output

    Ki Mi Gi Ti Pi Ei
    h k M G T P E Z Y
    d c m u n p f a z y

    http://en.wikipedia.org/wiki/Metric_prefix

    > 123 k 1 k, sum
    124000

