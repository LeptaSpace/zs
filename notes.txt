
Things to do
    profile FSMs to see execution counts
    profile vm to see execution counts
    compress FSM to tables, perhaps
    decompile VM

ZeroScript code is always remixable
If you can run it, you can improve it
    Secrecy is Theft

ZeroScript.org

phrase:

    ( function [ '(' phrase ')' ] | number | string ) ...

compose:

    function: ( phrase )

virtual machine:

    code
        zs_call_t *code []
    data
        byte *data []

    resize during compilation, if needed

    pipe primitives
        pipe_shift      drop input, move output to input, new output
        pipe_push       push output, new pipe pair
        pipe_pop        drop input, move output to input, pop output
        pipe_purge      purge input and output


    token      ---> code        data
    123             number_8    123
    123456780       number_64   1234567890
    sum             pipe_link
                    sum

    sum (           pipe_push
        123         number_8    123
        456         number_8    456
    )               pipe_pop
                    sum

    sum (           pipe_push
        123         number_8    123
        count       pipe_link
                    count
    )               pipe_pop
                    sum

composition:

    How do we execute a composed function?

    some: (
        123         number_8    123
    )               return
    some            call        some

//  register class
//  register method

loops
conditionals
matching
real numbers vs. whole numbers
no overloading
    different functions for 1.2+1.2 and 2+2

NO RECURSION
    devil's spawn!!

- no language feature should take more than a few lines to explain


    -- can we redefine a function?
        - yes, useful
        - requires linked list dictionary
        - compilation speed no problem

>>** allow # comments in lines, outside strings obviously

    native data types
        integers
        strings
        zmsg
        zchunk

    chunks (useful on pipes)

    //  Compile long string constant
    //  [len32][string][0]
    string = "Hello, World (long version)";
    length = strlen (string) + 1;
    code [code_size++] = s_string_32;
    memcpy (data + data_size, &length, 4);
    data_size += 4;
    memcpy (data + data_size, (byte *) string, length);
    data_size += length;


invoke:

    values function
    function ( values )
    ( values function )


    1 2 3 sum
        number 1 -> push to output pipe
        number 2 -> push to output pipe
        number 3 -> push to output pipe
        sum ->
            lookup
            switch output pipe to input pipe
            start new output pipe
            execute 'sum'
    print output pipe

    sum (1 2 3)
        function ( -> one token

        function ( function ( function ( function () ) ) )

        -> stack functions
        ( means open stack
        ) means pop & execute stack
        -> anything else
            pop & execute function stack

    sum (sum (1 2 3) count (4 5 6))

    myfunction (args)
    conditional on match args -> matching
    or pass args to something else -> just invoke it