.output "$(class.name).h"
/*  =========================================================================
    $(class.name) - scaling atomics

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

     * The XML model used for this code generation: $(filename), or
     * The code generation script that built this file: $(script)
    ************************************************************************
.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

#ifndef $(CLASS.NAME)_H_INCLUDED
#define $(CLASS.NAME)_H_INCLUDED

#ifndef S_APPLY_SCALE_DEFINED
#define S_APPLY_SCALE_DEFINED
//  Applies a whole scale to a pipe register
static void
s_apply_scale (zs_pipe_t *input, zs_pipe_t *output, int64_t scale)
{
    if (zs_pipe_type (input) == 'w')
        zs_pipe_set_whole (output, zs_pipe_whole (input) * scale);
    else
    if (zs_pipe_type (input) == 'r')
        zs_pipe_set_real (output, zs_pipe_real (input) * (double) scale);
    else {
        //  String could be real or whole
        if ((double) zs_pipe_whole (input) == zs_pipe_real (input))
            zs_pipe_set_whole (output, zs_pipe_whole (input) * scale);
        else
            zs_pipe_set_real (output, zs_pipe_real (input) * scale);
    }
}
#endif

.for class.atomic
.   atomic.type ?= "whole"
static int
s_$(name:) (zs_vm_t *self)
{
    zs_pipe_t *output = zs_vm_output (self);
    if (zs_vm_probing (self)) {
        zs_vm_register (self, "$(atomic.name:)", "$(string.trim (atomic.?''):left)");
.   for alias
        zs_vm_register (self, "$(alias.name:)", NULL);
.   endfor
    }
    else
    if (zs_pipe_size (zs_vm_input (self))) {
        zs_pipe_t *input = zs_vm_input (self);
        //  List function; recv and process all values
        while (zs_pipe_recv (input) == 0) {
.   if type = "real"
            //  Always coerce to a real value
            zs_pipe_set_real (output, zs_pipe_real (input) * $(value:));
.   else
            s_apply_scale (input, output, (int64_t) ($(value:)));
.   endif
            zs_pipe_send (output);
        }
    }
    else
    if (zs_pipe_size (output)) {
        //  Unary function; pull last value off pipe
        zs_pipe_pull (output);
.   if type = "real"
        //  Always coerce to a real value
        zs_pipe_set_real (output, zs_pipe_real (output) * $(value:));
.   else
        s_apply_scale (output, output, (int64_t) ($(value:)));
.   endif
        zs_pipe_send (output);
    }
    else
        //  Constant; send multipler as value
.   if type = "real"
        zs_pipe_send_real (output, $(value:));
.   else
        zs_pipe_send_whole (output, (int64_t) ($(value:)));
.   endif
    return 0;
}

.endfor
static void
s_register_$(class.name) (zs_vm_t *self)
{
.for class.atomic
    zs_vm_probe (self, s_$(name:));
.endfor
}
#endif
