<class name = "zs_repl" script = "fsm_c">
    This is the REPL (read-evaluate-print loop) for ZeroScript.
    http://en.wikipedia.org/wiki/Read-eval-print_loop

    We accept input from the user and compile as we go along.
    When we have a complete command we execute it, and delete
    the compiled code.

    Alternatively, the user can define functions, which can
    then be composed and executed.

<state name = "starting" inherit = "defaults">
    <event name = "number" next = "building shell">
        <action name = "compile define shell" />
        <action name = "compile number" />
        <action name = "get next token" />
    </event>
    <event name = "string" next = "building shell">
        <action name = "compile define shell" />
        <action name = "compile string" />
        <action name = "get next token" />
    </event>
    <event name = "simple fn" next = "building shell">
        <action name = "compile define shell" />
        <action name = "compile chain" />
        <action name = "get next token" />
    </event>
    <event name = "complex fn" next = "building shell">
        <action name = "compile define shell" />
        <action name = "compile open" />
        <action name = "get next token" />
    </event>
    <event name = "define fn" next = "building function">
        <action name = "compile define" />
        <action name = "get next token" />
    </event>
</state>

<state name = "building shell" inherit = "building function">
    <event name = "close list">
        <action name = "compile close" />
        <action name = "get next token" />
    </event>
    <event name = "finished">
        <action name = "check if completed" />
    </event>
    <event name = "completed" next = "starting">
        <action name = "compile commit shell" />
        <action name = "run virtual machine" />
        <action name = "rollback the function" />
    </event>
</state>

<state name = "building function" inherit = "defaults">
    <event name = "number">
        <action name = "compile number" />
        <action name = "get next token" />
    </event>
    <event name = "string">
        <action name = "compile string" />
        <action name = "get next token" />
    </event>
    <event name = "simple fn">
        <action name = "compile chain" />
        <action name = "get next token" />
    </event>
    <event name = "complex fn">
        <action name = "compile open" />
        <action name = "get next token" />
    </event>
    <event name = "close list">
        <action name = "compile close or commit" />
        <action name = "get next token" />
    </event>
    <event name = "completed" next = "starting">
    </event>
</state>

<state name = "defaults">
    <event name = "number" next = "starting">
        <action name = "rollback the function" />
        <action name = "signal syntax error" />
    </event>
    <event name = "string" next = "starting">
        <action name = "rollback the function" />
        <action name = "signal syntax error" />
    </event>
    <event name = "simple fn" next = "starting">
        <action name = "rollback the function" />
        <action name = "signal syntax error" />
    </event>
    <event name = "complex fn" next = "starting">
        <action name = "rollback the function" />
        <action name = "signal syntax error" />
    </event>
    <event name = "define fn" next = "starting">
        <action name = "rollback the function" />
        <action name = "signal syntax error" />
    </event>
    <event name = "close list" next = "starting">
        <action name = "rollback the function" />
        <action name = "signal syntax error" />
    </event>
    <event name = "invalid" next = "starting">
        <action name = "rollback the function" />
        <action name = "signal syntax error" />
    </event>
    <event name = "finished" next = "starting">
        <action name = "rollback the function" />
        <action name = "check if completed" />
    </event>
    <event name = "completed" next = "starting">
        <action name = "rollback the function" />
        <action name = "signal completed" />
    </event>
</state>

</class>
