<class
    name = "zs_lex"
    script = "fsm_c"
    package_dir = "."
    >

<state name = "expecting token" inherit = "defaults">
    <event name = "letter" next = "reading function">
        <action name = "start new token" />
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "hyphen" next = "after unary sign">
        <action name = "start new token" />
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "plus" next = "after unary sign">
        <action name = "start new token" />
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "digit" next = "reading number">
        <action name = "start new token" />
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "usable" next = "reading function">
        <action name = "start new token" />
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "open quote" next = "reading string">
        <action name = "start new token" />
        <action name = "parse next character" />
    </event>
    <event name = "close list">
        <action name = "have close list token" />
    </event>
    <event name = "comma">
        <action name = "have phrase token" />
    </event>
    <event name = "period">
        <action name = "have sentence token" />
    </event>
    <event name = "finished">
        <action name = "have null token" />
    </event>
</state>

<state name = "reading function" inherit = "defaults">
    <event name = "letter">
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "digit">
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "hyphen">
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "usable">
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "whitespace" next = "after function">
        <action name = "parse next character" />
    </event>
    <event name = "newline" next = "after function">
        <action name = "parse next character" />
    </event>
    <event name = "colon" next = "after function colon">
        <action name = "parse next character" />
    </event>
    <event name = "open list" next = "expecting token">
        <action name = "have nested fn token" />
    </event>
    <event name = "close list" next = "expecting token">
        <action name = "have inline fn token" />
        <action name = "push back to previous" />
    </event>
    <event name = "comma" next = "expecting token">
        <action name = "have inline fn token" />
        <action name = "push back to previous" />
    </event>
    <event name = "period" next = "expecting token">
        <action name = "have inline fn token" />
        <action name = "push back to previous" />
    </event>
    <event name = "finished" next = "expecting token">
        <action name = "have inline fn token" />
    </event>
</state>

<state name = "after function">
    <event name = "finished" next = "expecting token">
        <action name = "have inline fn token" />
    </event>
    <event name = "open list" next = "expecting token">
        <action name = "have nested fn token" />
    </event>
    <event name = "colon" next = "after function colon">
        <action name = "parse next character" />
    </event>
    <event name = "*" next = "expecting token">
        <action name = "have inline fn token" />
        <action name = "push back to previous" />
    </event>
</state>

<state name = "after function colon" inherit = "defaults">
    <event name = "open list" next = "expecting token">
        <action name = "have define fn token" />
    </event>
</state>

<state name = "after unary sign" inherit = "reading function">
    <event name = "digit" next = "reading number">
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "letter" next = "reading function">
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "hyphen" next = "reading function">
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "plus" next = "reading function">
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "percent" next = "expecting token">
        <action name = "store the character" />
        <action name = "have number token" />
    </event>
</state>

<state name = "reading number" inherit = "defaults">
    <event name = "digit">
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "letter">
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "hyphen">
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "plus">
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "percent" next = "expecting token">
        <action name = "store the character" />
        <action name = "have number token" />
    </event>
    <event name = "close list" next = "expecting token">
        <action name = "have number token" />
        <action name = "push back to previous" />
    </event>
    <event name = "comma" next = "after number comma">
        <action name = "parse next character" />
    </event>
    <event name = "period" next = "after number period">
        <action name = "parse next character" />
    </event>
    <event name = "whitespace" next = "expecting token">
        <action name = "have number token" />
    </event>
    <event name = "newline" next = "expecting token">
        <action name = "have number token" />
    </event>
    <event name = "finished" next = "expecting token">
        <action name = "have number token" />
    </event>
</state>

<state name = "after number comma">
    <event name = "digit" next = "reading number">
        <action name = "store comma character" />
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "*" next = "expecting token">
        <action name = "have number token" />
        <action name = "push back to previous" />
        <action name = "push back to previous" />
    </event>
</state>

<state name = "after number period">
    <event name = "digit" next = "reading number">
        <action name = "store period character" />
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
    <event name = "*" next = "expecting token">
        <action name = "have number token" />
        <action name = "push back to previous" />
        <action name = "push back to previous" />
    </event>
</state>

<state name = "reading string">
    <event name = "close quote" next = "expecting token">
        <action name = "have string token" />
    </event>
    <event name = "finished">
        <action name = "store newline character" />
    </event>
    <event name = "*">
        <action name = "store the character" />
        <action name = "parse next character" />
    </event>
</state>

<state name = "reading comment">
    <event name = "newline" next = "expecting token">
        <action name = "parse next character" />
    </event>
    <event name = "finished" next = "expecting token">
        <action name = "have null token" />
    </event>
    <event name = "*">
        <action name = "parse next character" />
    </event>
</state>

<state name = "defaults">
    <event name = "other" next = "expecting token">
        <action name = "have invalid token" />
    </event>
    <event name = "whitespace">
        <action name = "parse next character" />
    </event>
    <event name = "comment" next = "reading comment">
        <action name = "parse next character" />
    </event>
    <event name = "newline">
        <action name = "parse next character" />
    </event>
    <event name = "*" next = "expecting token">
        <action name = "have invalid token" />
    </event>
</state>

</class>
