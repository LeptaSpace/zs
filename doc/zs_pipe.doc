#### zs_pipe - ZeroScript data pipe

A pipe is an ordered list of strings and wholes.

Please add @discuss section in ../src/zs_pipe.c.

This is the class interface:

    //  Create a new zs_pipe, return the reference if successful, or NULL
    //  if construction failed due to lack of available memory.
    zs_pipe_t *
        zs_pipe_new (void);
    
    //  Destroy the zs_pipe and free all memory used by the object.
    void
        zs_pipe_destroy (zs_pipe_t **self_p);
    
    //  Sets pipe register to contain a specified whole number; any previous
    //  value in the register is lost.
    void
        zs_pipe_set_whole (zs_pipe_t *self, int64_t whole);
    
    //  Sets pipe register to contain a specified real number; any previous
    //  value in the register is lost.
    void
        zs_pipe_set_real (zs_pipe_t *self, double real);
    
    //  Sets pipe register to contain a specified string; any previous value
    //  in the register is lost.
    void
        zs_pipe_set_string (zs_pipe_t *self, const char *string);
    
    //  Sends current pipe register to the pipe; returns 0 if successful, or
    //  -1 if the pipe register was empty. Clears the register.
    int
        zs_pipe_send (zs_pipe_t *self);
    
    //  Send whole number to pipe; this wipes the current pipe register.
    void
        zs_pipe_send_whole (zs_pipe_t *self, int64_t whole);
    
    //  Send real number to pipe; this wipes the current pipe register.
    void
        zs_pipe_send_real (zs_pipe_t *self, double real);
    
    //  Send string to pipe; this wipes the current pipe register.
    void
        zs_pipe_send_string (zs_pipe_t *self, const char *string);
    
    //  Send whole number to pipe; this wipes the current pipe register.
    void
        zs_pipe_send_whole (zs_pipe_t *self, int64_t whole);
    
    //  Send real number to pipe; this wipes the current pipe register.
    void
        zs_pipe_send_real (zs_pipe_t *self, double real);
    
    //  Send string to pipe; this wipes the current pipe register.
    void
        zs_pipe_send_string (zs_pipe_t *self, const char *string);
    
    //  Receives the next value off the pipe, into the register. Any previous
    //  value in the register is lost. Returns 0 if a value was successfully
    //  received. If the pipe was empty, returns -1. This method does not block.
    int
        zs_pipe_recv (zs_pipe_t *self);
    
    //  Pulls the last-sent value off the pipe, into the register. Any previous
    //  value in the register is lost. Returns 0 if a value was successfully
    //  received. If the pipe was empty, returns -1. This method does not block.
    int
        zs_pipe_pull (zs_pipe_t *self);
    
    //  Returns the type of the register, 'w' for whole, 'r' for real, or 's' for
    //  string. Returns -1 if the register is empty.
    char
        zs_pipe_type (zs_pipe_t *self);
    
    //  Returns the value of the register, coerced to a whole number. This can
    //  cause loss of precision. If no conversion was possible, or the register
    //  is empty, returns zero.
    int64_t
        zs_pipe_whole (zs_pipe_t *self);
    
    //  Returns the value of the register, coerced to a real number. This can
    //  cause loss of precision. If no conversion was possible, or the register
    //  is empty, returns zero.
    double
        zs_pipe_real (zs_pipe_t *self);
    
    //  Returns the value of the register, coerced to a string if needed. If the
    //  register is empty, returns an empty string "". The caller must not modify
    //  or free the string.
    char *
        zs_pipe_string (zs_pipe_t *self);
    
    //  Receives the next value off the pipe, into the register, and coerces it
    //  to a whole if needed. If there is no value to receive, returns 0.
    int64_t
        zs_pipe_recv_whole (zs_pipe_t *self);
    
    //  Receives the next value off the pipe, into the register, and coerces it
    //  to a real if needed. If there is no value to receive, returns 0.
    double
        zs_pipe_recv_real (zs_pipe_t *self);
    
    //  Receives the next value off the pipe, into the register, and coerces it
    //  to a string if needed. If there is no value to receive, returns "". The
    //  The caller must not modify or free the string.
    char *
        zs_pipe_recv_string (zs_pipe_t *self);
    
    //  Return number of values in pipe (0 or more)
    size_t
        zs_pipe_size (zs_pipe_t *self);
    
    //  Return pipe contents, as string. Caller must free it when done. Values are
    //  separated by spaces. This empties the pipe.
    char *
        zs_pipe_paste (zs_pipe_t *self);
    
    //  Empty the pipe of any values it might contain.
    void
        zs_pipe_purge (zs_pipe_t *self);
    
    //  Self test of this class
    void
        zs_pipe_test (bool animate);

This is the class self test code:

    zs_pipe_t *pipe = zs_pipe_new ();
    
    zs_pipe_send_whole (pipe, 12345);
    zs_pipe_send_string (pipe, "Hello World");
    assert (zs_pipe_size (pipe) == 2);
    
    int rc = zs_pipe_recv (pipe);
    assert (rc == 0);
    int64_t whole = zs_pipe_whole (pipe);
    assert (whole == 12345);
    rc = zs_pipe_recv (pipe);
    assert (rc == 0);
    const char *string = zs_pipe_string (pipe);
    assert (streq (string, "Hello World"));
    assert (zs_pipe_size (pipe) == 0);
    
    char *results = zs_pipe_paste (pipe);
    assert (streq (results, ""));
    
    zs_pipe_send_whole (pipe, 4);
    zs_pipe_send_whole (pipe, 5);
    zs_pipe_send_whole (pipe, 6);
    assert (zs_pipe_size (pipe) == 3);
    whole = zs_pipe_recv_whole (pipe);
    assert (whole == 4);
    zs_pipe_purge (pipe);
    assert (zs_pipe_size (pipe) == 0);
    
    zs_pipe_destroy (&pipe);

