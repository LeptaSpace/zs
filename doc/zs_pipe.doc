#### zs_pipe - ZeroScript data pipe

A pipe is an ordered list of strings and numbers.

Please add @discuss section in ../src/zs_pipe.c.

This is the class interface:

    //  Create a new zs_pipe, return the reference if successful, or NULL
    //  if construction failed due to lack of available memory.
    zs_pipe_t *
        zs_pipe_new (void);

    //  Destroy the zs_pipe and free all memory used by the object.
    void
        zs_pipe_destroy (zs_pipe_t **self_p);

    //  Add numeric value to pipe
    void
        zs_pipe_queue_number (zs_pipe_t *self, int64_t number);

    //  Add string value to pipe
    void
        zs_pipe_queue_string (zs_pipe_t *self, const char *value);

    //  Return number of values in pipe
    size_t
        zs_pipe_size (zs_pipe_t *self);

    //  Return true if next value off pipe is numeric
    bool
        zs_pipe_isnumber (zs_pipe_t *self);

    //  Return true if next value off pipe is numeric
    bool
        zs_pipe_isstring (zs_pipe_t *self);

    //  Return next value off pipe as number; if the value is a string it's
    //  converted to a number, quite brutally.
    int64_t
        zs_pipe_get_number (zs_pipe_t *self);

    //  Return next value off pipe as string (converting if needed)
    //  Caller should not modify value; this is managed by pipe class.
    const char *
        zs_pipe_get_string (zs_pipe_t *self);

    //  Return pipe contents, as string. Caller must free it when done. Values are
    //  separated by spaces.
    char *
        zs_pipe_contents (zs_pipe_t *self);

    //  Empty the pipe of any values it might contain.
    void
        zs_pipe_purge (zs_pipe_t *self);

    //  Self test of this class
    void
        zs_pipe_test (bool animate);

This is the class self test code:

    zs_pipe_t *pipe = zs_pipe_new ();

    zs_pipe_queue_number (pipe, 12345);
    assert (zs_pipe_isnumber (pipe));
    zs_pipe_queue_string (pipe, "Hello World");
    assert (zs_pipe_size (pipe) == 2);

    assert (zs_pipe_get_number (pipe) == 12345);
    const char *string = zs_pipe_get_string (pipe);
    assert (streq (string, "Hello World"));
    assert (zs_pipe_size (pipe) == 0);

    char *results = zs_pipe_contents (pipe);
    assert (streq (results, ""));

    zs_pipe_queue_number (pipe, 12345);
    zs_pipe_queue_number (pipe, 12345);
    zs_pipe_queue_number (pipe, 12345);
    assert (zs_pipe_size (pipe) == 3);
    zs_pipe_purge (pipe);
    assert (zs_pipe_size (pipe) == 0);

    zs_pipe_destroy (&pipe);

