<class name = "zs_parser" script = "fsm_c">

<state name = "start">
    <event name = "ok" next = "expecting token">
        <action name = "read first character" />
    </event>
</state>

<state name = "expecting token" inherit = "defaults">
    <event name = "letter" next = "reading function">
        <action name = "start new token" />
        <action name = "store the character" />
        <action name = "read next character" />
    </event>
    <event name = "sign" next = "reading number">
        <action name = "start new token" />
        <action name = "store the character" />
        <action name = "read next character" />
    </event>
    <event name = "digit" next = "reading number">
        <action name = "start new token" />
        <action name = "store the character" />
        <action name = "read next character" />
    </event>
    <event name = "open quote" next = "reading string">
        <action name = "start new token" />
        <action name = "read next character" />
    </event>
    <event name = "white space">
        <action name = "read next character" />
    </event>
    <event name = "punctuation">
        <action name = "have punctuation" />
        <action name = "read next character" />
    </event>
    <event name = "finished">
    </event>
</state>

<state name = "reading function" inherit = "defaults">
    <event name = "letter">
        <action name = "store the character" />
        <action name = "read next character" />
    </event>
    <event name = "sign">
        <action name = "store the character" />
        <action name = "read next character" />
    </event>
    <event name = "separator">
        <action name = "store the character" />
        <action name = "read next character" />
    </event>
    <event name = "white space" next = "expecting token">
        <action name = "have function" />
        <action name = "read next character" />
    </event>
    <event name = "finished" next = "start">
        <action name = "have function" />
    </event>
</state>

<state name = "reading number" inherit = "defaults">
    <event name = "digit">
        <action name = "store the character" />
        <action name = "read next character" />
    </event>
    <event name = "white space" next = "expecting token">
        <action name = "have number" />
        <action name = "read next character" />
    </event>
    <event name = "finished" next = "start">
        <action name = "have number" />
    </event>
</state>

<state name = "reading string">
    <event name = "close quote" next = "expecting token">
        <action name = "have string" />
        <action name = "read next character" />
    </event>
    <event name = "finished">
        <action name = "report unfinished string" />
        <action name = "terminate" />
    </event>
    <event name = "*">
        <action name = "store the character" />
        <action name = "read next character" />
    </event>
</state>

<state name = "defaults">
    <event name = "letter">
        <action name = "report unexpected input" />
        <action name = "terminate" />
    </event>
    <event name = "digit">
        <action name = "report unexpected input" />
        <action name = "terminate" />
    </event>
    <event name = "sign">
        <action name = "report unexpected input" />
        <action name = "terminate" />
    </event>
    <event name = "separator">
        <action name = "report unexpected input" />
        <action name = "terminate" />
    </event>
    <event name = "punctuation">
        <action name = "report unexpected input" />
        <action name = "terminate" />
    </event>
    <event name = "open quote" next = "start">
        <action name = "report unexpected input" />
        <action name = "terminate" />
    </event>
    <event name = "close quote" next = "start">
        <action name = "report unexpected input" />
    </event>
    <event name = "finished">
        <!-- Finish processing -->
    </event>
    <event name = "white space">
        <action name = "report unexpected input" />
        <action name = "terminate" />
    </event>
    <event name = "other">
        <action name = "report unexpected input" />
        <action name = "terminate" />
    </event>
</state>

</class>